import streamlit as st


def main_page():
    st.set_page_config(
        page_title='Python Code Translator',
        layout='wide'
    )

    st.write(
        """<style>
        [data-testid="stHorizontalBlock"] {
            align-items: center;
        }
        [data-testid="stSidebar"] [data-testid="stImage"] {
            margin-top: 250px;
        }
        svg {
            margin: 0 10px;
        }
        </style>
        """,
        unsafe_allow_html=True
    )

    cols = st.sidebar.columns(3)
    cols[0].write('')
    cols[1].image('images/logo_bw.png')
    cols[2].write('')

    st.sidebar.markdown('<h2 style="text-align: center; color: grey; font-family: \'Roboto Condensed\' sans-serif;"><i>Python Code Translator</i></h2>',
                        unsafe_allow_html=True)
    st.sidebar.markdown(
        '<p style="text-align: center; color: #aaaaaa; font-family: \'Roboto Condensed\' sans-serif;"><i><br>Junwon Hwang</i></p>\n',
        unsafe_allow_html=True)

    st.sidebar.markdown('''
        <div style="display: flex; justify-content: center; align-content: center;">
            <a href="https://github.com/nuxlear">
                <div><svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="grey" class="bi bi-github" viewBox="0 0 16 16">
                        <path d="M8 0C3.58 0 0 3.58 0 8c0 3.54 2.29 6.53 5.47 7.59.4.07.55-.17.55-.38 0-.19-.01-.82-.01-1.49-2.01.37-2.53-.49-2.69-.94-.09-.23-.48-.94-.82-1.13-.28-.15-.68-.52-.01-.53.63-.01 1.08.58 1.23.82.72 1.21 1.87.87 2.33.66.07-.52.28-.87.51-1.07-1.78-.2-3.64-.89-3.64-3.95 0-.87.31-1.59.82-2.15-.08-.2-.36-1.02.08-2.12 0 0 .67-.21 2.2.82.64-.18 1.32-.27 2-.27.68 0 1.36.09 2 .27 1.53-1.04 2.2-.82 2.2-.82.44 1.1.16 1.92.08 2.12.51.56.82 1.27.82 2.15 0 3.07-1.87 3.75-3.65 3.95.29.25.54.73.54 1.48 0 1.07-.01 1.93-.01 2.2 0 .21.15.46.55.38A8.012 8.012 0 0 0 16 8c0-4.42-3.58-8-8-8z"/>
                </svg></div>
            </a>
            <a href="mailto:nuclear1221@gmail.com">
                <div><svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="grey" class="bi bi-envelope-fill" viewBox="0 0 16 16">
                        <path d="M.05 3.555A2 2 0 0 1 2 2h12a2 2 0 0 1 1.95 1.555L8 8.414.05 3.555ZM0 4.697v7.104l5.803-3.558L0 4.697ZM6.761 8.83l-6.57 4.027A2 2 0 0 0 2 14h12a2 2 0 0 0 1.808-1.144l-6.57-4.027L8 9.586l-1.239-.757Zm3.436-.586L16 11.801V4.697l-5.803 3.546Z"/>
                </svg></div>
            </a>
        </div>
        ''', unsafe_allow_html=True)

    st.image('images/logo.png', width=200)
    st.header('Python Code Translator')

    disclaimer = st.expander('üßæ Terms of Use & Disclaimer', expanded=False)
    disclaimer.markdown('''
    ### Terms of Use & Disclaimer
    
    **Commercial Use**
    
    This project is allowed only non-commercial use. 
    
    **User Data Collection**
    
    This project collects the users' inputs and generated outputs for improvements. \\
    Thus, the users are regarded as to be agree with these uses and collecting. 
    
    **Disclaimer**
    
    This project can be suddenly closed by the limits of API usage, \\
    and this project has no responsibilities to restore the user data issued by such problems. 
    
    All the result is generated by the Codex model. The personal or critical information of the code may not be filtered, \\
    but this project has no responsibilities when such information is revealed. 
    ''')

    st.markdown('''
    ### What is this?
    This project is AI-based Python code translator for programming beginners. 
    
    The [Codex](https://openai.com/blog/openai-codex/) from OpenAI is text generation model, 
    which usually generates code from given natural language. \\
    It is based on the GPT-3 model architecture, one of the state-of-the-arts text generation models.
    
    With Codex model, you can translate the text in English to Python code, or vice versa. \\
    Also, you can modify the code by giving prompt text in English. 
        
    It contains 3 main functions as below. 
    
    - **Code Explanation**
    - **Code Generation & Modification**
    - **Test Code Generation**

    Basically, all inputs are formed as prompt for their uses, 
    so each function makes a proper input prompt string for getting result from Codex model. 

    You can find the page of each function on the side-bar.
    ''')

    st.markdown('''
    ---
    
    ### Code Explanation
    
    Codex model can translate the code into some explanations in English. 
    
    On the page **[üí¨ Code Explanation]**, you can receive the generated explanation from your Python code. 
    
    Also, the application will find some enhancement points from your code by using [PyLint](https://pylint.pycqa.org/en/latest/), 
    and get suggestions of the fixed version.
    \\
    \\
    \\
    An example of code explanation is below. 
    
    
    ''')

    # exp_cols = st.columns([1, 5, 0.5, 1, 0.5, 5, 1])
    # exp_cols[1].image('images/exp_1.png')
    # exp_cols[3].image('images/arrow.png')
    # exp_cols[5].image('images/exp_3.png')
    cols = st.columns([1, 8, 1])
    cols[1].image('images/home_1.png', 'Page screenshot of **Code Explanation**')

    st.markdown('''    
    Every result of explanations and enhancement suggestions, you can click the reaction buttons below. 
    
    The project collects your feedbacks and uses them for model improvement.
     
    ''')
    st.markdown('''
    ---
    
    ### Code Generation & Editing
    
    Codex model can generate code described as given English text. 
    
    Also, if the code is given and the text described to make some changes to the code, 
    the model can apply the changes to the given code. 
    
    Thus, you can generate or edit your code easily by only using English text on **[üí° Code Generation & Editing]**. 
    \\
    \\
    \\
    An example of code generation & editing is below. 
    
    ''')

    gen_cols = st.columns([1, 8, 1])
    gen_cols[1].image('images/home_2.png', use_column_width='auto')

    st.markdown('''
    ---
    
    ### Test Code Generation

    It is sometimes very annoying to make some test codes for my implementation. 
    Especially, the test cases need to be correct for checking whether the implementation is valid. 
    
    If you use the page **[‚öôÔ∏è Test Code Generation]**, you can simply get some example test codes
    for your code. 
    
    Although the code may not be executed immediately, it can provide you the code snippet
    to make successful test code. 
    \\
    \\
    \\
    An example of test code generation is below. 
    ''')

    test_cols = st.columns([1, 4, 1])
    test_cols[1].image('images/home_3.png', use_column_width='auto')

    st.markdown('''
        ---

        **That's it!**
        
        If you have any question about the project or any suggestion for improvement,
        Please do not hesitate to contact me. 
        
        My profile & links are on the sidebar. You can click the icon! ‚ò∫Ô∏è
        
    ''')


if __name__ == '__main__':
    main_page()
